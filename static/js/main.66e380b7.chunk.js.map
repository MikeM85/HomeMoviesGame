{"version":3,"sources":["components/Scoreboard/index.js","components/Card/index.js","App.js","serviceWorker.js","index.js"],"names":["Scoreboard","props","react_default","a","createElement","className","title","score","topScore","Cards","onClick","clickedImage","id","alt","character","src","image","shuffle","array","i","length","j","Math","floor","random","_ref","App","state","characters","showAlert","showSuccess","clickedcharacters","_this","setState","indexOf","push","console","log","handleIncrement","makeShuffle","_this2","this","style","opacity","components_Scoreboard","map","Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66e380b7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./scoreboard.css\";\n\nfunction Scoreboard(props) {\n  return (\n    <header className=\"scoreB\">\n      <div className=\"row\">\n        <div className=\"col-md-6 col-left\"><h5>{props.title}</h5></div>\n        <div className=\"col-md-3 col-right\"><h6>High Score {props.score}</h6></div>\n        <div className=\"col-md-3 col-right\"><h6>Current Score: {props.topScore}</h6></div>\n      </div>\n      <div className=\"row\">\n      <div className=\"col-md-12 col-right\">\n      <h6>Click on a character, but don't click on them more than once!</h6></div>\n      </div>\n    </header>\n  );\n}\nexport default Scoreboard;","import React from \"react\";\nimport \"./card.css\";\n\nconst Cards = props => (\n  <div className=\"card\" onClick={() => props.clickedImage(props.id)}>\n    <div className=\"img-container\">\n      <img alt={props.character} src={props.image} />\n      <div className=\"overlay\">\n        <div className=\"text\">\n          {props.character}\n          <br />\n          - \n          <br />\n          \n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Cards;","import React, { Component } from \"react\";\nimport characters from \"./cards.json\";\nimport Scoreboard from \"./components/Scoreboard\";\nimport Card from \"./components/Card\";\n\n// shuffle upon each click\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nclass App extends Component {\n  state = {\n    characters,\n    score: 0,\n    topScore: 0,\n    showAlert: 0,\n    showSuccess: 0,\n    clickedcharacters: []\n  };\n\n  clickedImage = id => {\n    // assign the state of the empty array to a let to be updated\n    let clickedcharacters = this.state.clickedcharacters;\n    let score = this.state.score;\n    let topScore = this.state.topScore;\n    this.setState({\n      showAlert: 0\n    });\n\n    // if the clicked image has an id of the indexed characters\n    if (clickedcharacters.indexOf(id) === -1) {\n      // push that id into that id into the array to be stored\n      clickedcharacters.push(id);\n      console.log(clickedcharacters);\n      // run the score function\n      this.handleIncrement();\n      // run the reshuffle function after each click\n      this.makeShuffle();\n    } else if (this.state.score === 12) {\n      // alert player wins\n      this.setState({\n        showSuccess: 1,\n        score: 0,\n        clickedcharacters: []\n      });\n    } else {\n       // alert player loss\n      this.setState({\n        score: 0,\n        clickedcharacters: []\n      });\n      console.log(\"duplicate\");\n      this.setState({\n        showAlert: 1\n      });\n    }\n\n    if (score > topScore) {\n      this.setState({\n        topScore: score\n      });\n    }\n  };\n\n  // handleIncrement increases this.state.score by 1\n  handleIncrement = () => {\n    // setState updates a components states\n    this.setState({ score: this.state.score + 1 });\n  };\n\n  // shuffle up images\n  makeShuffle = () => {\n    this.setState({ characters: shuffle(characters) });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div\n          className=\"alert alert-danger\"\n          style={{ opacity: this.state.showAlert }}\n        >\n          You clicked on this already, try again...\n          </div>\n        <div\n          className=\"alert alert-success\"\n          style={{ opacity: this.state.showSuccess }}\n        >\n          Good job!\n          </div>\n        <Scoreboard\n          title=\"Home Movies Clicky Game\"\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <div className=\"row\">\n          {this.state.characters.map(character => (\n            <Card\n              key={character.id}\n              id={character.id}\n              character={character.character}\n              image={character.image}\n              clickedImage={this.clickedImage}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}